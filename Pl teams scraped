import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as color
from matplotlib import  cm
from matplotlib.cm import ScalarMappable
from bs4 import BeautifulSoup
import urllib.request
import csv
import matplotlib.animation as animation
import re

#CHELSEA
url=urllib.request.urlopen('https://en.wikipedia.org/wiki/List_of_Chelsea_F.C._seasons')
soup=BeautifulSoup(url,'html.parser')
table=soup.find_all('table')[2]#table tags
rows=table.find_all('tr')#row tags


with open('chelsea.csv','wt+',newline="",encoding="utf-8") as a:
    writer=csv.writer(a)
    for i in rows:
        row=list()
        for j in i.findAll(['td','th']):
            row.append(j.get_text())
        writer.writerow(row)

#MANCHESTER UTD
url1=urllib.request.urlopen("https://en.wikipedia.org/wiki/List_of_Manchester_United_F.C._seasons")
soup1=BeautifulSoup(url1,'html.parser')
table1=soup1.findAll('table')[2]
row1=table1.findAll('tr')
with open('Manu.csv','wt+',newline="",encoding='utf-8') as b:
    writer1=csv.writer(b)
    for i in row1:
        rows1=list()
        for j in i.findAll(['td','th']):
            rows1.append(j.get_text())
        writer1.writerow(rows1)
#ARSENAL
url2=urllib.request.urlopen("https://en.wikipedia.org/wiki/List_of_Arsenal_F.C._seasons")
soup2=BeautifulSoup(url2,'html.parser')
table2=soup2.findAll('table')[3]
row2=table2.findAll('tr')

with open('Arsenal.csv','wt+',newline="",encoding='utf-8') as c:
    writer2=csv.writer(c)
    for i in row2:
        rows2=list()
        for j in i.findAll(['td','th']):
            rows2.append(j.get_text())
        writer2.writerow(rows2)

#LIVERPOOL
url3=urllib.request.urlopen("https://en.wikipedia.org/wiki/List_of_Liverpool_F.C._seasons")
soup3=BeautifulSoup(url3,'html.parser')
table3=soup3.findAll('table')[2]
row3=table3.findAll('tr')

with open('Liverpool.csv','wt+',newline="",encoding='utf-8') as d:
    writer3=csv.writer(d)
    for i in row3:
        rows3=list()
        for j in i.findAll(['td','th']):
            rows3.append(j.get_text())
        writer3.writerow(rows3)

#Spurs
url4=urllib.request.urlopen("https://en.wikipedia.org/wiki/List_of_Tottenham_Hotspur_F.C._seasons")
soup4=BeautifulSoup(url4,'html.parser')
table4=soup4.findAll('table')[0]
row4=table4.findAll('tr')
#print(row4)
with open('Spurs.csv','wt+',newline="",encoding='utf-8') as e:
    writer4=csv.writer(e)
    for i in row4[0:2]:
        rows4=list()
        for j in i.findAll(['th','td']):
            rows4.append(j.get_text())
        print(rows4)
        writer4.writerow(rows4)

    saved_rowspan=[]
    flag=2
    for i in table4.findAll('tr'):
        if(flag>0):
            flag-=1
            continue
        cells=i.findAll(['td','th'])
        if(len(saved_rowspan)==0):
            saved_rowspan=[None for j in range(16)]
        #print("LENGTH",len(cells))
        #print("CELLSB",cells)
        flag1=1
        #print("ROWSB",saved_rowspan)
        for index,cell in enumerate(cells):
            if cell.has_key('rowspan'):
                rowspan_data={'value':cell,'rows left':int(cell['rowspan'])}
                #print("INDEX",index)
                if flag1==0:
                    saved_rowspan[index+1]=rowspan_data
                elif(saved_rowspan[index]==None):
                    saved_rowspan[index]=rowspan_data
                else:
                    saved_rowspan[index+1]=rowspan_data
                    flag1=0
        #print("ROWS",saved_rowspan)
        if len(cells)!=len(saved_rowspan):
            for column,rowspan_data in enumerate(saved_rowspan):
                if rowspan_data is not None:
                    count=0
                    for i in range(len(cells)):
                        if rowspan_data['value']==cells[i] and column==i:
                            count=1
                    if(count==1):
                        continue
                    cells.insert(column,rowspan_data['value'])
                    if(saved_rowspan[column]['rows left']==2):
                        saved_rowspan[column]=None
                    else:
                        saved_rowspan[column]['rows left']-=1
        #print("CELLS",cells)

        rows4=list()
        for j in cells:
            rows4.append(j.get_text())
        #print(rows4)
        writer4.writerow(rows4)
        
#The Animated bar chart for top 5 teams
fig=plt.figure(facecolor='cornsilk')
plt.style.use('ggplot')
t={"Chelsea":df['W%'].mean()*100,"Manchester United":df1['W%'].mean()*100,'Arsenal':df2['W%'].mean()*100,'Liverpool':df3['W%'].mean()*100,'Spurs':df4['W%'].mean()*100}
tc={"Chelsea":'blue',"Manchester United":'red','Arsenal':'indianred','Liverpool':'maroon','Spurs':'silver'}
teams=sorted(t.items(),key=lambda x:(x[1],x[0]))
#print(teams)
colors=list()
for i,j in teams:
    for k,l in tc.items():
        if i==k:
            colors.append(l)
for i in range(len(teams)):
    plt.barh(teams[i][0],teams[i][1],label=teams[i][0],color=colors[i])

plt.xlabel('AVERAGE WIN%',fontsize=15)
plt.ylabel('TEAMS',fontsize=15)
plt.gca().xaxis.label.set_color('black')
plt.gca().yaxis.label.set_color('black')
plt.title("PERFORMANCE OF TOP 5 ENGLAND TEAMS IN PL",fontsize=20)
plt.gca().set_xticks(np.arange(0,110,10))
plt.legend(loc='lower right',title='Teams',facecolor='gray')
for i in range(len(teams)):
    plt.text(x=teams[i][1],y=i,s=str(teams[i][1])[:5]+"%",fontsize=18)
    plt.text(x=teams[i][1]-(len(teams[i][0])+4),y=i,s=teams[i][0],fontsize=18)
plt.gca().tick_params(labelleft=False)

n=100
def update(event):
    if event==n:
        a.event_source.stop()
    plt.cla()
    plt.xlabel('AVERAGE WIN%', fontsize=15)
    plt.ylabel('TEAMS', fontsize=15)
    plt.gca().xaxis.label.set_color('black')
    plt.gca().yaxis.label.set_color('black')
    plt.title("PERFORMANCE OF TOP 5 ENGLAND TEAMS IN PL", fontsize=20)
    plt.gca().tick_params(labelleft=False)
    for i in range(len(teams)):
        #print(event)
        x=np.arange(0,teams[i][1])[:event]
        if len(x)>0:
            plt.text(x=x[-1], y=i, s=str((teams[i][1]+x[-1])-teams[i][1])[:5] + "%", fontsize=18)
            plt.text(x=x[-1] - (len(teams[i][0])), y=i, s=teams[i][0], fontsize=18)
        plt.barh(teams[i][0],np.arange(0,teams[i][1])[:event], label=teams[i][0], color=colors[i])

    plt.annotate('n={}'.format(event),[0,0])
a=animation.FuncAnimation(fig,update,interval=10)

plt.show()
