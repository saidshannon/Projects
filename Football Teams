#%matplotlib notebook
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as color
from matplotlib import  cm
from matplotlib.cm import ScalarMappable
from bs4 import BeautifulSoup
import urllib.request
import csv
import matplotlib.animation as animation
import re

#CHELSEA

#Reading the csv file and keeping first row as header for the columns and skip last two rows of footer
df=pd.read_csv('https://raw.githubusercontent.com/saidshannon/Assignment-datasets/main/chelsea.csv',header=1,skipfooter=2,engine='python')
df.reset_index(inplace=True)
df.drop(['Pos\n', 'CS\n', 'CL\n', 'EL\n', 'CW\n', 'SC\n', 'CWC\n', 'FM\n','GF\n', 'GA\n', 'Pts\n','Name(s)\n', 'Goals\n','D\n','L\n'],inplace=True,axis=1)
df.rename(columns={'level_0':'Date','level_1':'Division','level_2':'Pld','Division\n':'W','Pld\n':'D','W\n':'L'},inplace=True)
#Dropping the rows of the null values of the dataset
df.drop(np.where(df['Division'].isnull()==True)[0],inplace=True)
#print(df.head())
for i in range(len(df.columns)):
    for j in df[list(df)[i]]:
        df[list(df)[i]].replace(j,j.split('\n')[0],inplace=True)
df.where(df['Division']=='Prem',inplace=True)
df=df.dropna()
df.reset_index(inplace=True)
df.drop('index',axis=1,inplace=True)

df['W%']=df['W'].astype(int)/(df['W'].astype(int)+df['L'].astype(int))
#print(df)

#MANCHESTER UTD

df1=pd.read_csv('https://raw.githubusercontent.com/saidshannon/Assignment-datasets/main/Manu.csv',header=1,engine='python')
df1.reset_index(inplace=True)
df1.drop([ 'GF\n', 'GA\n', 'Pts\n', 'Pos\n','Name(s)\n', 'Goals\n','Pld\n','W\n','D\n','L\n'],axis=1,inplace=True)
df1.rename(columns={'level_0':'Date','level_1':'Division','level_2':'Pld','level_3':'W','level_4':'D','Division\n':'L'},inplace=True)
for i in range(len(df1.columns)):
    for j in df1[list(df1)[i]]:
        df1[list(df1)[i]].replace(j,j.split('\n')[0],inplace=True)

df1.set_index('Division',inplace=True)
df1.drop('â€”',inplace=True)
df1.reset_index(inplace=True)
df1.where(df1['Division']=='Prem',inplace=True)
df1.dropna(inplace=True)
df1.reset_index(inplace=True)
df1.drop('index',inplace=True,axis=1)
df1['W%']=df1['W'].astype(int)/(df1['W'].astype(int)+df1['L'].astype(int))
#print(df1)

#ARSENAL

df2=pd.read_csv('https://raw.githubusercontent.com/saidshannon/Assignment-datasets/main/Arsenal.csv',engine='python')
df2.drop(list(df2.columns)[6:],axis=1,inplace=True)
columns=['Date','Division','Pld','W','D','L']
for i in range(len(columns)):
    df2.rename(columns={list(df2.columns)[i]:columns[i]},inplace=True)

df2=df2.where(df2.isnull()==False)
df2.dropna(inplace=True)
for i in range(len(df2.columns)):
    for j in df2[list(df2)[i]]:
        df2[list(df2)[i]].replace(j,j.split('\n')[0],inplace=True)
df2.where(df2['Division']=='Prem',inplace=True)
df2.dropna(inplace=True)
df2.reset_index(inplace=True)
df2.drop('index',axis=1,inplace=True)
df2['W%']=df2['W'].astype(int)/(df2['W'].astype(int)+df2['L'].astype(int))
#print(df2)

#LIVERPOOL

df3=pd.read_csv('https://raw.githubusercontent.com/saidshannon/Assignment-datasets/main/Liverpool.csv',engine='python',header=1,skipfooter=1)
df3.reset_index(inplace=True)
df3.drop(df3.columns[6:],inplace=True,axis=1)

for i in range(len(df3.columns)):
    df3.rename(columns={df3.columns[i]:columns[i]},inplace=True)
df3=df3.where(df3.isnull()==False)
df3.dropna(inplace=True)
for i in range(len(df3.columns)):
    for j in df3[list(df3)[i]]:
        df3[list(df3)[i]].replace(j,j.split('\r')[0],inplace=True)


df3.where(df3['Division']=='PL',inplace=True)
df3.dropna(inplace=True)
df3.reset_index(inplace=True)
df3.drop('index',axis=1,inplace=True)
df3['W%']=df3['W'].astype(int)/(df3['W'].astype(int)+df3['L'].astype(int))
#print(df3)

#SPURS


df4=pd.read_csv('https://raw.githubusercontent.com/saidshannon/Assignment-datasets/main/Spurs.csv',engine='python',header=1)
#print(df4.head())
#print(df4.tail())
df4.reset_index(inplace=True)
df4.drop(df4.columns[6:],axis=1,inplace=True)
for i in range(len(df4.columns)):
    df4.rename(columns={df4.columns[i]:columns[i]},inplace=True)
df4.dropna(inplace=True)
for i in range(len(df4.columns)):
    for j in df4[list(df4)[i]]:
        df4[list(df4)[i]].replace(j,j.split('\n')[0],inplace=True)

df4.where(df4['Division']=='Prem',inplace=True)
df4.dropna(inplace=True)
df4.drop_duplicates(subset='Date',keep='first',inplace=True)
df4.reset_index(inplace=True)
df4.drop('index',axis=1,inplace=True)
df4['W%']=df4['W'].astype(int)/(df4['W'].astype(int)+df4['L'].astype(int))
#print(df4)



#PLOTTING GRAPH
fig=plt.figure(figsize=(10,10))
plt.style.use('ggplot')
t={"Chelsea":df['W%'].mean()*100,"Manchester United":df1['W%'].mean()*100,'Arsenal':df2['W%'].mean()*100,'Liverpool':df3['W%'].mean()*100,'Spurs':df4['W%'].mean()*100}
tc={"Chelsea":'blue',"Manchester United":'red','Arsenal':'indianred','Liverpool':'maroon','Spurs':'silver'}
teams=sorted(t.items(),key=lambda x:(x[1],x[0]))
#print(teams)
colors=list()
for i,j in teams:
    for k,l in tc.items():
        if i==k:
            colors.append(l)
for i in range(len(teams)):
    plt.barh(y=teams[i][0],width=teams[i][1],color=colors[i])

plt.xlabel('AVERAGE WIN%',fontsize=15)
plt.ylabel('TEAMS',fontsize=15)
plt.gca().xaxis.label.set_color('black')
plt.gca().yaxis.label.set_color('black')
plt.title("PERFORMANCE OF TOP 5 ENGLAND TEAMS IN PL(1992-2020)",fontsize=20)
plt.gca().set_xticks(np.arange(0,110,10))
#plt.legend(loc='lower right',title='Teams',facecolor='gray')
for i in range(len(teams)):
    plt.gca().text(x=teams[i][1],y=i,s=str(teams[i][1])[:5]+"%",fontsize=18,ha='left')
    plt.gca().text(x=teams[i][1],y=i,s=teams[i][0],fontsize=18,ha='right')
plt.gca().tick_params(labelleft=False)

n=100
def update(event):
    if event==n:
        a.event_source.stop()
    plt.cla()
    plt.xlabel('AVERAGE WIN%', fontsize=15)
    plt.ylabel('TEAMS', fontsize=15)
    plt.gca().xaxis.label.set_color('black')
    plt.gca().yaxis.label.set_color('black')
    plt.title("PERFORMANCE OF TOP 5 ENGLAND TEAMS IN PL", fontsize=20)
    plt.gca().tick_params(labelleft=False)
    for i in range(len(teams)):
        if(event==0):
            break
        x=np.arange(0,teams[i][1])[:event]
        plt.gca().text(x=x[-1], y=i, s=str((teams[i][1]+x[-1])-teams[i][1])[:5] + "%", fontsize=18,ha='left')
        plt.gca().text(x=x[-1], y=i, s=teams[i][0], fontsize=18,ha='right')
        plt.barh(y=teams[i][0], width=np.arange(0, teams[i][1])[:event], color=colors[i])
    plt.annotate('n={}'.format(event),[0,0])
a=animation.FuncAnimation(fig,update,interval=10)
plt.show()

